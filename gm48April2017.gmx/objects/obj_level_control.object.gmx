<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls actual game play

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init globals
/**********
player_healther
player_hunger

room_xsquares
room_ysquares
room_xsquare_start
room_ysquare_start

**********/
randomize();

drop_scaf_rate = 20;


trigger_height = global.scale*10;

global.room_xunits = room_width/global.scale;
global.room_yunits = 20;

global.border_l = 0;
global.border_r = room_width;
global.ymin = global.scale*5;// y coord. the topmost level of diggables;
global.ymax = global.ymin + ((global.room_yunits * global.scale) * 3);// the bottomost level of diggables;
global.ytrigger = global.ymax - trigger_height;//Triggers more diggables if player beyond this point

global.gamescore = 0;
global.allow_lava = 0;
global.drops=0;//number of scaffold drops




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make diggables and player
scr_make_diggables(0,global.ymin,global.room_xunits,global.room_yunits * 3);

// Create a scaffold;


scr_make_objects(0,0, global.room_xunits, 1, obj_scaffold);

//instance_create(0 + global.scale/2,global.ymin -global.scale/2, obj_scaffold );
//instance_create(room_width + global.scale/2, global.ymin - global.scale/2, obj_scaffold );

// Digg a starting hole
hx1=room_width/2 - (global.scale * 2);
hy1= global.ymin;
scr_dig_area(hx1,hy1,5,3);


/***
x = room_width/2;
y= global.ymin - 160;
***/
// Position player

var tbl = instance_create(room_width/2,global.ymin - 160,obj_lab_table);
instance_create(tbl.x,tbl.y,obj_player);
instance_create(tbl.x,tbl.y,obj_view_follow);

//scr_place_croc_gem_big();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Run scaffold drop alarm
alarm[1] = room_speed * drop_scaf_rate;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add needed objects

instance_create(0,0,obj_grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dig area and drop scaffold

with(obj_scaffold){
    flashing=false;
}
var num_units = global.room_yunits / 2;

scr_make_diggables(0,global.ymax, global.room_xunits, num_units);
// Dig dirt and leave the walls
scr_dig_area(0, global.ymin, global.room_xunits, num_units );

// Remove the extra walls at top
with(obj_wall){

    if( y &lt; global.ymin -  global.room_yunits ){
        instance_destroy();
    }

}



global.ymin += num_units * global.scale;
global.ymax += num_units * global.scale;

global.ytrigger = global.ymax - trigger_height;

scr_screen_shake();



global.drops++;
           
alarm[1] = room_speed * drop_scaf_rate;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scaffold Drop warning
with(obj_scaffold){
    flashing=true;
}
alarm[2]= room_speed * 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game over
if(instance_exists(obj_menu_restart)){
    with(obj_menu_restart){
        x = view_xview[0] + (view_wview[0]/2);
        y = view_yview[0] + global.scale*3;
        show = true;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check player position and create more diggables
if(instance_exists(obj_player)){
    if(obj_player.y&gt;=global.ytrigger){
        
        var num_units = global.room_yunits;
    
        scr_make_diggables(0,global.ymax, global.room_xunits, num_units);
        // Dig dirt and leave the walls
        scr_dig_area(0, global.ymin, global.room_xunits, num_units );
        
        // Remove the extra walls at top
        with(obj_wall){

            if( y &lt; global.ymin -  global.room_yunits ){
                instance_destroy();
            }

        }
        
        
        global.drops++;
        global.ymin += num_units * global.scale;
        global.ymax += num_units * global.scale;
    
        global.ytrigger = global.ymax - trigger_height;
           
        
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check player status
/// Update player vars
if(instance_exists(obj_player)){

    var txt = noone;
    
    if(obj_player.hunger &lt; 1){    
        txt=scr_push_array(txt,"You died of hunger!");
    }
    
    if(obj_player.thirst &lt; 1){
        txt=scr_push_array(txt,"You died of thirst!");       
    }
    
    if(obj_player.hunger &lt; 1 || obj_player.thirst &lt; 1){   
        var txt_obj = instance_create(obj_player.x,obj_player.y-64,obj_text_view);
        txt_obj.text = txt;
        scr_player_death();
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// User input
if(scr_user_input(INPUT_ESCAPE)){
    room_goto(rm_lobby);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check level status

if(global.drops&gt;3){
    global.allow_lava=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player death. Start timer
audio_play_sound(snd_effect_dead1,1,0);
alarm[0]=room_speed * 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw lines
/***
if(debug_mode){
    draw_set_color(c_lime);
    draw_line(0,global.ymin,room_width,global.ymin);
    
    draw_set_color(c_red);
    draw_line(0,global.ymax,room_width,global.ymax);
    
    draw_set_color(c_blue);
    draw_line(0,global.ytrigger,room_width,global.ytrigger);
    
    
    draw_set_color(c_blue);
    draw_line(global.border_l,0,global.border_l,global.ymax);
    draw_line(global.border_r,0,global.border_r,global.ymax);
}
***/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
